{"version":3,"sources":["randomArray.js","containers/NumberBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["getArray","arrayOfArrays","i","push","getArrayOfIntegers","array","genRandomSingleDigitInteger","Math","floor","random","NumberBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlers","sortCards","x","_this$state","state","numbers","sorted","allNumbers","sortedNumbers","concat","toConsumableArray","sort","a","b","splice","setState","original","num","rowIndex","_this2","react_default","createElement","key","style","display","flex","flexDirection","map","nestedNum","colIndex","renderNumberCard","color","Paper","position","justifyContent","alignItems","backgroundColor","randomRgbColor","textShadow","Typography","variant","top","length","left","right","bottom","_this3","_this$state2","flexWrap","height","Button","onClick","renderNumberRow","React","Component","App","containers_NumberBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70bceb45.chunk.js","sourcesContent":["export function getArray() {\n  let arrayOfArrays = [];\n  for (let i = 0; i < 10; i++) {\n    arrayOfArrays.push(getArrayOfIntegers());\n  }\n  return arrayOfArrays;\n}\n\nconst getArrayOfIntegers = () => {\n  let array = [];\n  for (let i = 0; i < 10; i++) {\n    array.push(genRandomSingleDigitInteger());\n  }\n  return array;\n};\n\nconst genRandomSingleDigitInteger = () => {\n  return Math.floor(Math.random() * 10)\n};","import React from \"react\";\nimport { getArray } from \"../randomArray\";\nimport { Button, Paper, Typography as Text } from \"@material-ui/core\";\n\nclass NumberBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],\n      original: [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],\n      sorted: false,\n    };\n  }\n\n  handlers = {\n    sortCards: () => {\n      const { numbers, sorted } = this.state;\n      let allNumbers = [];\n      let x;\n      let sortedNumbers = [];\n      for (x in numbers) {\n        allNumbers = [...allNumbers, ...numbers[x]];\n      }\n\n      allNumbers.sort((a, b) => {\n        return b - a;\n      });\n\n      while (typeof allNumbers[0] === \"number\") {\n        x = allNumbers.splice(0, 10);\n        sortedNumbers.push(x);\n      }\n\n      if (sorted) {\n        this.setState(state => ({ sorted: false, numbers: state.original, original: numbers }));\n      } else {\n        this.setState(state => ({ sorted: true, numbers: sortedNumbers, original: numbers }));\n      }\n    },\n  };\n\n  componentDidMount() {\n    this.setState({ numbers: getArray() });\n  }\n\n  renderNumberRow(num, rowIndex) {\n    return (\n      <div key={rowIndex} style={{ display: \"flex\", flex: \"1\", flexDirection: \"row\" }}>\n        {num &&\n          num.map((nestedNum, colIndex) => {\n            return this.renderNumberCard(num, nestedNum, rowIndex, colIndex);\n          })}\n      </div>\n    );\n  }\n\n  renderNumberCard(num, nestedNum, rowIndex, colIndex) {\n    const { numbers } = this.state;\n    const color = [];\n    const randomRgbColor = () => {\n      for (var i = 0; i < 3; i++) {\n        color.push(Math.floor(Math.random() * 255));\n      }\n      return `rgb(${color})`;\n    };\n    return (\n      <Paper\n        key={colIndex}\n        style={{\n          display: \"flex\",\n          position: \"relative\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flex: \"1\",\n          backgroundColor: randomRgbColor(),\n          color: \"white\",\n          textShadow: \"-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000\",\n        }}\n      >\n        <Text variant=\"h2\">{nestedNum}</Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", top: 2 }}>\n          {rowIndex > 0 ? nestedNum + numbers[rowIndex - 1][colIndex] : nestedNum + numbers[numbers.length - 1][colIndex]}\n        </Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", left: 2 }}>\n          {colIndex > 0 ? nestedNum + numbers[rowIndex][colIndex - 1] : numbers[rowIndex][num.length - 1]}\n        </Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", right: 2 }}>\n          {colIndex < num.length - 1 ? nestedNum + numbers[rowIndex][colIndex + 1] : nestedNum + numbers[rowIndex][0]}\n        </Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", bottom: 2 }}>\n          {rowIndex < numbers.length - 1 ? nestedNum + numbers[rowIndex + 1][colIndex] : numbers[0][colIndex]}\n        </Text>\n      </Paper>\n    );\n  }\n\n  render() {\n    const { numbers, sorted } = this.state;\n    const { sortCards } = this.handlers;\n    return (\n      <section style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", flex: 1, height: \"100%\" }}>\n        <Button variant=\"contained\" onClick={sortCards} color =\"secondary\">\n          {sorted ? \"Restore Original Order\" : \"Sort Numbers\"}\n        </Button>\n        {numbers.map((num, rowIndex) => {\n          return this.renderNumberRow(num, rowIndex);\n        })}\n      </section>\n    );\n  }\n}\n\nexport default NumberBoard;\n","import React from 'react';\nimport NumberBoard from './containers/NumberBoard.jsx';\n\nfunction App() {\n  return (\n    <NumberBoard/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}