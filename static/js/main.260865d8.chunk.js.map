{"version":3,"sources":["randomArray.js","containers/NumberBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["getArrayOfIntegers","array","i","push","genRandomSingleDigitInteger","Math","floor","random","NumberBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlers","handleModalOpen","event","setState","menuAnchor","currentTarget","handleModalClose","randomizeNumbers","callback","numbers","arrayOfArrays","getArray","currentNumbers","originalNumbers","sortType","state","_this2","randomizeColors","colors","forEach","number","color","concat","randomRgbColor","row","allNumbers","toConsumableArray","sort","a","b","sortedNumbers","splice","num","rowIndex","_this3","react_default","createElement","key","style","display","flex","flexDirection","map","nestedNum","colIndex","renderNumberCard","_this$state","Paper","position","justifyContent","alignItems","backgroundColor","textShadow","Typography","variant","top","length","left","right","bottom","_this4","_this$state2","_this$handlers","flexWrap","height","Button","id","onClick","Menu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","open","Boolean","onClose","MenuItem","sortCards","renderNumberRow","React","Component","App","containers_NumberBoard","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.260865d8.chunk.js","sourcesContent":["export function getArray() {\n  let arrayOfArrays = [];\n  for (let i = 0; i < 10; i++) {\n    arrayOfArrays.push(getArrayOfIntegers());\n  }\n  return arrayOfArrays;\n}\n\nconst getArrayOfIntegers = () => {\n  let array = [];\n  for (let i = 0; i < 10; i++) {\n    array.push(genRandomSingleDigitInteger());\n  }\n  return array;\n};\n\nconst genRandomSingleDigitInteger = () => {\n  return Math.floor(Math.random() * 10)\n};","import React from \"react\";\nimport { getArray } from \"../randomArray\";\nimport { Button, Menu, MenuItem, Paper, Typography as Text } from \"@material-ui/core\";\n\nclass NumberBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentNumbers: [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],\n      sortType: null,\n    };\n  }\n\n  handlers = {\n    handleModalOpen: event => {\n      this.setState({ menuAnchor: event.currentTarget });\n    },\n\n    handleModalClose: () => {\n      this.setState({ menuAnchor: null });\n    },\n  };\n\n  componentDidMount() {\n    this.randomizeNumbers(() => this.randomizeColors());\n  }\n  \n  randomizeNumbers = callback => {\n    const numbers = getArray();\n    numbers && this.setState({ currentNumbers: numbers, originalNumbers: numbers, sortType: null }, callback);\n  };\n\n  randomizeColors() {\n    const { currentNumbers } = this.state;\n    const colors = [];\n    const randomRgbColor = () => {\n      const color = [];\n      for (var i = 0; i < 3; i++) {\n        color.push(Math.floor(Math.random() * 255));\n      }\n      return `rgb(${color})`;\n    };\n    currentNumbers &&\n      currentNumbers.forEach(number => {\n        number.forEach(() => {\n          colors.push(randomRgbColor());\n        });\n      });\n    this.setState({ colors });\n  }\n\n  sortCards(sortType) {\n    const { currentNumbers } = this.state;\n\n    let allNumbers = [];\n    let row;\n    currentNumbers.forEach(number => {\n      allNumbers = [...allNumbers, ...number];\n    });\n\n    const asc = (a, b) => a - b;\n    const desc = (a, b) => b - a;\n    if (sortType === \"DESC\") {\n      allNumbers.sort(desc);\n    } else if (sortType === \"ASC\") {\n      allNumbers.sort(asc);\n    }\n\n    if (sortType) {\n      let sortedNumbers = [];\n      while (typeof allNumbers[0] === \"number\") {\n        row = allNumbers.splice(0, 10);\n        sortedNumbers.push(row);\n      }\n      this.setState({ currentNumbers: sortedNumbers, sortType, menuAnchor: null });\n    } else {\n      this.setState({ currentNumbers: this.state.originalNumbers, sortType: null, menuAnchor: null });\n    }\n  }\n\n  renderNumberRow(num, rowIndex) {\n    return (\n      <div key={rowIndex} style={{ display: \"flex\", flex: \"1\", flexDirection: \"row\" }}>\n        {num &&\n          num.map((nestedNum, colIndex) => {\n            return this.renderNumberCard(num, nestedNum, rowIndex, colIndex);\n          })}\n      </div>\n    );\n  }\n\n  renderNumberCard(num, nestedNum, rowIndex, colIndex) {\n    const { currentNumbers, colors } = this.state;\n    return (\n      <Paper\n        key={colIndex}\n        style={{\n          display: \"flex\",\n          position: \"relative\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flex: \"1\",\n          backgroundColor: colors ? colors[(rowIndex + 1) * (colIndex + 1) - 1] : \"#888\",\n          color: \"white\",\n          textShadow: \"-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000\",\n        }}\n      >\n        <Text variant=\"h2\">{nestedNum}</Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", top: 2 }}>\n          {rowIndex > 0 ? nestedNum + currentNumbers[rowIndex - 1][colIndex] : nestedNum + currentNumbers[currentNumbers.length - 1][colIndex]}\n        </Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", left: 2 }}>\n          {colIndex > 0 ? nestedNum + currentNumbers[rowIndex][colIndex - 1] : currentNumbers[rowIndex][num.length - 1]}\n        </Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", right: 2 }}>\n          {colIndex < num.length - 1 ? nestedNum + currentNumbers[rowIndex][colIndex + 1] : nestedNum + currentNumbers[rowIndex][0]}\n        </Text>\n\n        <Text variant=\"caption\" style={{ position: \"absolute\", bottom: 2 }}>\n          {rowIndex < currentNumbers.length - 1 ? nestedNum + currentNumbers[rowIndex + 1][colIndex] : currentNumbers[0][colIndex]}\n        </Text>\n      </Paper>\n    );\n  }\n\n  render() {\n    const { currentNumbers, menuAnchor } = this.state;\n    const { handleModalOpen, handleModalClose } = this.handlers;\n    return (\n      <section style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", height: \"100%\" }}>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <Button id=\"sort-button\" variant=\"contained\" onClick={handleModalOpen} color=\"secondary\" style={{ flex: \"1 0 auto\" }}>\n            Sort Numbers\n          </Button>\n          <Button id=\"sort-button\" variant=\"contained\" onClick={() => this.randomizeNumbers()} color=\"secondary\" style={{ flex: \"1 0 auto\" }}>\n            Randomize Numbers\n          </Button>\n          <Button id=\"sort-button\" variant=\"contained\" onClick={() => this.randomizeColors()} color=\"secondary\" style={{ flex: \"1 0 auto\" }}>\n            Randomize Colors\n          </Button>\n        </div>\n        <Menu\n          id=\"sort-menu\"\n          anchorEl={menuAnchor}\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n          transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          getContentAnchorEl={null}\n          open={Boolean(menuAnchor)}\n          onClose={handleModalClose}\n        >\n          <MenuItem onClick={() => this.sortCards(\"DESC\")}>Descending</MenuItem>\n          <MenuItem onClick={() => this.sortCards(\"ASC\")}>Ascending</MenuItem>\n          <MenuItem onClick={() => this.sortCards()}>None</MenuItem>\n        </Menu>\n        {currentNumbers.map((num, rowIndex) => {\n          return this.renderNumberRow(num, rowIndex);\n        })}\n      </section>\n    );\n  }\n}\n\nexport default NumberBoard;\n","import React from 'react';\nimport NumberBoard from './containers/NumberBoard.jsx';\n\nfunction App() {\n  return (\n    <NumberBoard/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}